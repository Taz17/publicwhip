%p
  The MP's votes count towards a weighted average where the most important votes get
  #{pluralize(Distance.possible_points(:samestrong), "point")},
  less important votes get
  #{pluralize(Distance.possible_points(:same), "point")},
  and less important votes for which the MP was absent get
  #{pluralize(Distance.possible_points(:absent), "point")}.
  In important votes the MP gets awarded the full
  = pluralize(Distance.points(:samestrong), "point")
  for voting the same as the policy,
  = pluralize(Distance.points(:differstrong), "point")
  for voting against the policy, and
  = pluralize(Distance.points(:absentstrong), "point")
  for not voting. In less important votes, the MP gets
  = pluralize(Distance.points(:same), "point")
  for voting with the policy,
  = pluralize(Distance.points(:differ), "point")
  for voting against, and
  = Distance.points(:absent)
  (out of #{Distance.possible_points(:absent)})
  if absent.

%p
  Then, the number gets converted to a simple english language phrase based on the range of values it's within.

%table.table
  %thead
    %tr.headings
      %th Type of vote
      %th
      %th Points / out of
      %th No of votes
      %th Total points / out of
  %tbody
    %tr
      %th{rowspan: 3, scope: "rowgroup"} Most important votes
      %td MP voted with policy
      = render "policies/how_the_number_is_calculated/cells", policy_person_distance: policy_person_distance, type: :samestrong
    %tr
      %td MP voted against policy
      = render "policies/how_the_number_is_calculated/cells", policy_person_distance: policy_person_distance, type: :differstrong
    %tr
      %td MP absent
      = render "policies/how_the_number_is_calculated/cells", policy_person_distance: policy_person_distance, type: :absentstrong
    %tr
      %th{rowspan: 3, scope: "rowgroup"} Less important votes
      %td MP voted with policy
      = render "policies/how_the_number_is_calculated/cells", policy_person_distance: policy_person_distance, type: :same
    %tr
      %td MP voted against policy
      = render "policies/how_the_number_is_calculated/cells", policy_person_distance: policy_person_distance, type: :differ
    %tr
      %td MP absent*
      = render "policies/how_the_number_is_calculated/cells", policy_person_distance: policy_person_distance, type: :absent
    %tr
      %th{colspan: 4} Total:
      %td
        = policy_person_distance.total_points
        \/
        = policy_person_distance.possible_total_points

%p
  Agreement score
  \= #{policy_person_distance.total_points} / #{policy_person_distance.possible_total_points}
  \=
  = succeed "." do
    %b= fraction_to_percentage_display(policy_person_distance.agreement_fraction)

%p
  And then

%ul
  - PolicyPersonDistance.category_range_mapping.each do |category, range|
    %li
      between
      = fraction_to_percentage_display(range.min)
      and
      = fraction_to_percentage_display(range.max)
      becomes
      "#{category_words_sentence(category)}"

%p
  *Pressure of other work means MPs or
  Senators are not always available to vote â€“ it does not always
  indicate they have abstained. Therefore, being absent on a less
  important vote makes a disproportionatly small
  difference.
